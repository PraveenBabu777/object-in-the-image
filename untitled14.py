# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16xIhiAq3ljsGWvaSs7kBnAplvnZbKJYT
"""

from transformers import DetrImageProcessor, DetrForObjectDetection
import torch
from PIL import Image, ImageDraw, ImageFont
import requests

# Load image from URL
url = "https://plus.unsplash.com/premium_photo-1687653086440-7dc61b5ff5db?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
image = Image.open(requests.get(url, stream=True).raw)

# Load DETR model and processor
processor = DetrImageProcessor.from_pretrained("facebook/detr-resnet-50", revision="no_timm")
model = DetrForObjectDetection.from_pretrained("facebook/detr-resnet-50", revision="no_timm")

# Preprocess the image
inputs = processor(images=image, return_tensors="pt")
outputs = model(**inputs)

# Post-process outputs to obtain detected objects
target_sizes = torch.tensor([image.size[::-1]])  # Size as (height, width)
results = processor.post_process_object_detection(outputs, target_sizes=target_sizes, threshold=0.9)[0]

# Draw rectangles around detected objects
draw = ImageDraw.Draw(image)
font = ImageFont.load_default()

for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
    box = [round(i, 2) for i in box.tolist()]  # Convert to a list of rounded floats
    label_text = f"{model.config.id2label[label.item()]}: {round(score.item(), 3)}"
    print(f"Detected {label_text} at location {box}")

    # Draw rectangle
    draw.rectangle(box, outline="red", width=3)

    # Draw label
    draw.text((box[0], box[1] - 10), label_text, fill="red", font=font)

# Display the image
image.save('output.jpg')